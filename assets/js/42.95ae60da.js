(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{362:function(t,a,n){"use strict";n.r(a);var s=n(33),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"变量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[t._v("#")]),t._v(" 变量")]),t._v(" "),n("p",[t._v("##基本类型和引用类型的值\n引用类型可以动态的添加编辑属性\n复制变量值\n传递参数\n值类型\n引用类型\n检测类型\ntypeof\ninstanceof")]),t._v(" "),n("h2",{attrs:{id:"执行环境及作用域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#执行环境及作用域"}},[t._v("#")]),t._v(" 执行环境及作用域")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("执行环境\n\t每个执行环境都有一个与之关联的对象。环境中定义的所有变量和函数都保存在这个对象中。\n\t全局执行环境\n\t\t例如web浏览器中，全局执行环境是window对象\n\t函数执行环境\n\t\t每个函数都有自己的执行环境，执行完毕后，把控制权交给之前的执行环境\n作用域链\n\t保证对执行环境有权访问的所有变量和函数有序的执行\n\t内部环境可以通过作用域链访问所有外部环境，外部环境不能访问内部环境。\n\tvar声明的变量会自动被添加到最接近的环境中（作用域提升）\n")])])]),n("h2",{attrs:{id:"垃圾收集"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#垃圾收集"}},[t._v("#")]),t._v(" 垃圾收集")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("javascript具有自动垃圾回收机制\n标记清除\n引用计数\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);