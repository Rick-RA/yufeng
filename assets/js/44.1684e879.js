(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{368:function(a,t,v){"use strict";v.r(t);var _=v(33),r=Object(_.a)({},(function(){var a=this,t=a.$createElement,v=a._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("h1",{attrs:{id:"引用类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#引用类型"}},[a._v("#")]),a._v(" 引用类型")]),a._v(" "),v("h2",{attrs:{id:"object类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#object类型"}},[a._v("#")]),a._v(" Object类型")]),a._v(" "),v("h3",{attrs:{id:"_1、通过new操作符来创建"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1、通过new操作符来创建"}},[a._v("#")]),a._v(" 1、通过new操作符来创建")]),a._v(" "),v("h3",{attrs:{id:"_2、通过对象字面量形式来创建"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2、通过对象字面量形式来创建"}},[a._v("#")]),a._v(" 2、通过对象字面量形式来创建")]),a._v(" "),v("ul",[v("li",[a._v('var a = {name:"Rick"}')]),a._v(" "),v("li",[a._v("{} 为空时等效于new Object（）")]),a._v(" "),v("li",[a._v("该方式不会调用Object的构造函数")])]),a._v(" "),v("h3",{attrs:{id:"属性访问"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#属性访问"}},[a._v("#")]),a._v(" 属性访问")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("点语法")]),a._v(" "),v("ul",[v("li",[a._v("a.name")])])]),a._v(" "),v("li",[v("p",[a._v("方括号访问，可以使用变量")]),a._v(" "),v("ul",[v("li",[a._v('a["name"]')])])])]),a._v(" "),v("h2",{attrs:{id:"array类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#array类型"}},[a._v("#")]),a._v(" Array类型")]),a._v(" "),v("h3",{attrs:{id:"数组的每一项可以保存任意类型的数据"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数组的每一项可以保存任意类型的数据"}},[a._v("#")]),a._v(" 数组的每一项可以保存任意类型的数据")]),a._v(" "),v("h3",{attrs:{id:"创建方式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#创建方式"}},[a._v("#")]),a._v(" 创建方式")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("使用Array构造函数，也可以省略new操作符")])]),a._v(" "),v("li",[v("p",[a._v("使用数组字面量表示，[]")]),a._v(" "),v("ul",[v("li",[a._v("该方式不会调用Array构造函数")])])])]),a._v(" "),v("h3",{attrs:{id:"访问数组"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#访问数组"}},[a._v("#")]),a._v(" 访问数组")]),a._v(" "),v("ul",[v("li",[a._v("通过索引进行访问")]),a._v(" "),v("li",[a._v("length可以改变，通过length可以删除或增加数组的内容")])]),a._v(" "),v("h3",{attrs:{id:"数组检测"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数组检测"}},[a._v("#")]),a._v(" 数组检测")]),a._v(" "),v("ul",[v("li",[a._v("Array,isArray(myArray)")])]),a._v(" "),v("h3",{attrs:{id:"转换方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#转换方法"}},[a._v("#")]),a._v(" 转换方法")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("toLocaleString()")])]),a._v(" "),v("li",[v("p",[a._v("toString()")]),a._v(" "),v("ul",[v("li",[a._v("返回由数组中每个值的字符串形势拼接而成的一个以逗号分隔的字符串。类似于join，但是分隔符是逗号")])])]),a._v(" "),v("li",[v("p",[a._v("valueOf()")]),a._v(" "),v("ul",[v("li",[a._v("返回数组本身")])])]),a._v(" "),v("li",[v("p",[a._v("Array.prototype.join()")]),a._v(" "),v("ul",[v("li",[a._v("将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。如果数组只有一个项目，那么将返回该项目而不使用分隔符。")])])])]),a._v(" "),v("h3",{attrs:{id:"栈方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#栈方法"}},[a._v("#")]),a._v(" 栈方法")]),a._v(" "),v("ul",[v("li",[a._v("push()  返回数组长度")]),a._v(" "),v("li",[a._v("pop()  返回移除的项")])]),a._v(" "),v("h3",{attrs:{id:"队列方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#队列方法"}},[a._v("#")]),a._v(" 队列方法")]),a._v(" "),v("ul",[v("li",[a._v("shift()   从数组前面删除一个元素，返回被删除的item")]),a._v(" "),v("li",[a._v("unshift()   从数组前面添加元素，返回数组长度")])]),a._v(" "),v("h3",{attrs:{id:"排序"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#排序"}},[a._v("#")]),a._v(" 排序")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("reverse() 用于翻转数组")])]),a._v(" "),v("li",[v("p",[a._v("sort()")]),a._v(" "),v("ul",[v("li",[a._v("方法会调用每个数组的toString方法，然后比较得到的字符串。即使每一项都是数值，sort比较的也是字符创")]),a._v(" "),v("li",[a._v("可以接受一个条件函数作为参数，来比较数组")]),a._v(" "),v("li",[a._v("默认是升序排序")])])])]),a._v(" "),v("h3",{attrs:{id:"操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#操作"}},[a._v("#")]),a._v(" 操作")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("slice()")]),a._v(" "),v("ul",[v("li",[a._v("接收1或2个参数，即要返回下项的起始和结束位置，但不包括结束位置的那一项")])])]),a._v(" "),v("li",[v("p",[a._v("splice()")]),a._v(" "),v("ul",[v("li",[a._v("第一个参数表示起始位置")]),a._v(" "),v("li",[a._v("第二个参数表示要删除的长度")]),a._v(" "),v("li",[a._v("第三个参数表示要添加的内容（该参数可有可无）")])])])]),a._v(" "),v("h3",{attrs:{id:"位置方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#位置方法"}},[a._v("#")]),a._v(" 位置方法")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("indexOf（）")]),a._v(" "),v("ul",[v("li",[a._v("从数组开头搜索取值")])])]),a._v(" "),v("li",[v("p",[a._v("lastIndexOf()")]),a._v(" "),v("ul",[v("li",[a._v("从数组末尾搜索取值")])])])]),a._v(" "),v("h3",{attrs:{id:"迭代方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#迭代方法"}},[a._v("#")]),a._v(" 迭代方法")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("every()")]),a._v(" "),v("ul",[v("li",[a._v("如果每一项都返回true，则返回true")])])]),a._v(" "),v("li",[v("p",[a._v("filter()")]),a._v(" "),v("ul",[v("li",[a._v("返回该函数返回true的项的数组")])])]),a._v(" "),v("li",[v("p",[a._v("forEach()")]),a._v(" "),v("ul",[v("li",[a._v("没有返回值，类似于for")])])]),a._v(" "),v("li",[v("p",[a._v("map()")]),a._v(" "),v("ul",[v("li",[a._v("返回每次函数调用的结果组成的数组")])])]),a._v(" "),v("li",[v("p",[a._v("some()")]),a._v(" "),v("ul",[v("li",[a._v("如果该函数对任意一项返回true，就返回true。")])])])]),a._v(" "),v("h3",{attrs:{id:"归并方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#归并方法"}},[a._v("#")]),a._v(" 归并方法")]),a._v(" "),v("ul",[v("li",[a._v("reduce()")]),a._v(" "),v("li",[a._v("reduceRight()")])]),a._v(" "),v("h2",{attrs:{id:"date类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#date类型"}},[a._v("#")]),a._v(" Date类型")]),a._v(" "),v("h3",{attrs:{id:"date-parse"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#date-parse"}},[a._v("#")]),a._v(" Date.parse()")]),a._v(" "),v("ul",[v("li",[a._v("接受一个日期的字符串参数，返回相应的毫秒数")])]),a._v(" "),v("h3",{attrs:{id:"date-utc"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#date-utc"}},[a._v("#")]),a._v(" Date.UTC()")]),a._v(" "),v("ul",[v("li",[a._v("接收参数：年份，基于0的月份，月中的哪一天，小时数，分钟，秒，毫秒。前两个参数是必须的。 例如Date.UTC(2019,0)表示2019年1月的毫秒数")])]),a._v(" "),v("h3",{attrs:{id:"tolocaledatestring"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tolocaledatestring"}},[a._v("#")]),a._v(" toLocaleDateString()")]),a._v(" "),v("h3",{attrs:{id:"tolocaletimestring"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tolocaletimestring"}},[a._v("#")]),a._v(" toLocaleTimeString()")]),a._v(" "),v("h2",{attrs:{id:"regexp"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#regexp"}},[a._v("#")]),a._v(" RegExp")]),a._v(" "),v("h3",{attrs:{id:"var-expression-pattern-flags"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#var-expression-pattern-flags"}},[a._v("#")]),a._v(" var expression = / pattern /flags")]),a._v(" "),v("h3",{attrs:{id:"flags"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#flags"}},[a._v("#")]),a._v(" flags")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("g")]),a._v(" "),v("ul",[v("li",[a._v("表示全局模式，即模式将被应用于所有的字符串，而非在发现第一个匹配项时立即停止")])])]),a._v(" "),v("li",[v("p",[a._v("i")]),a._v(" "),v("ul",[v("li",[a._v("表示不区分大小写模式，即在匹配项时忽略模式与字符串的大小写")])])]),a._v(" "),v("li",[v("p",[a._v("m")]),a._v(" "),v("ul",[v("li",[a._v("表示多行模式，即在到达一行文本末尾时还会继续查找下一行中是否存在模式匹配的项")])])])]),a._v(" "),v("h3",{attrs:{id:"创建正则表达式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#创建正则表达式"}},[a._v("#")]),a._v(" 创建正则表达式")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("以字面量形式创建")]),a._v(" "),v("ul",[v("li",[a._v("var pattern = /[bc]at/i")])])]),a._v(" "),v("li",[v("p",[a._v("使用RegExp构造函数")]),a._v(" "),v("ul",[v("li",[a._v('var pattern = new RegExp("[bc]at","i")')])])])]),a._v(" "),v("h3",{attrs:{id:"实例属性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#实例属性"}},[a._v("#")]),a._v(" 实例属性")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("global")]),a._v(" "),v("ul",[v("li",[a._v("布尔值，表示是否设置了g标志")])])]),a._v(" "),v("li",[v("p",[a._v("ignoreCase")]),a._v(" "),v("ul",[v("li",[a._v("布尔值，表示是否设置了i标志")])])]),a._v(" "),v("li",[v("p",[a._v("lastIndex")]),a._v(" "),v("ul",[v("li",[a._v("整数，表示开始搜索下一个匹配项的字符位置，从0算起")])])]),a._v(" "),v("li",[v("p",[a._v("multiline")]),a._v(" "),v("ul",[v("li",[a._v("布尔值，表示是否设置了m标志")])])]),a._v(" "),v("li",[v("p",[a._v("source")]),a._v(" "),v("ul",[v("li",[a._v("正则表达式的字符串表示，按照字面量形式而非传入构造函数中的字符串模式返回")])])])]),a._v(" "),v("h3",{attrs:{id:"实例方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#实例方法"}},[a._v("#")]),a._v(" 实例方法")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("exec")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("接收一个参数，即要应用模式的字符串")])]),a._v(" "),v("li",[v("p",[a._v("返回第一个匹配项信息的数组，没有匹配项时返回null")]),a._v(" "),v("ul",[v("li",[a._v("index 表示匹配项在字符串中的位置")]),a._v(" "),v("li",[a._v("input 表示应用正则表达式的字符串")]),a._v(" "),v("li",[a._v("数组")])])])])]),a._v(" "),v("li",[v("p",[a._v("test")]),a._v(" "),v("ul",[v("li",[a._v("接收一个参数，即要应用模式的字符串")]),a._v(" "),v("li",[a._v("在模式与该参数匹配的情况下返回true，否则返回false")])])])]),a._v(" "),v("h3",{attrs:{id:"构造函数属性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#构造函数属性"}},[a._v("#")]),a._v(" 构造函数属性")]),a._v(" "),v("h2",{attrs:{id:"function类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#function类型"}},[a._v("#")]),a._v(" Function类型")]),a._v(" "),v("h3",{attrs:{id:"函数实际上是个对象"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#函数实际上是个对象"}},[a._v("#")]),a._v(" 函数实际上是个对象")]),a._v(" "),v("h3",{attrs:{id:"没有重载，后面的函数会覆盖前面的函数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#没有重载，后面的函数会覆盖前面的函数"}},[a._v("#")]),a._v(" 没有重载，后面的函数会覆盖前面的函数")]),a._v(" "),v("h3",{attrs:{id:"函数声明与函数表达式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#函数声明与函数表达式"}},[a._v("#")]),a._v(" 函数声明与函数表达式")]),a._v(" "),v("ul",[v("li",[a._v("解析器会率先读取函数声明，并使其在执行任何代码之前可用")]),a._v(" "),v("li",[a._v("表达式，必须等解析器执行到它所在的代码行，才会真正被解析执行")])]),a._v(" "),v("h3",{attrs:{id:"arguments"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#arguments"}},[a._v("#")]),a._v(" arguments")]),a._v(" "),v("ul",[v("li",[a._v("类数组对象，保存着传入函数中的所有参数")])]),a._v(" "),v("h3",{attrs:{id:"this"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#this"}},[a._v("#")]),a._v(" this")]),a._v(" "),v("h3",{attrs:{id:"length"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#length"}},[a._v("#")]),a._v(" length")]),a._v(" "),v("ul",[v("li",[a._v("函数希望接收的命名参数的个数")])]),a._v(" "),v("h3",{attrs:{id:"prototype"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#prototype"}},[a._v("#")]),a._v(" prototype")]),a._v(" "),v("ul",[v("li",[a._v("保存了所有引用类型的实例方法的真正所在")])]),a._v(" "),v("h3",{attrs:{id:"每个函数都有两个非继承方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#每个函数都有两个非继承方法"}},[a._v("#")]),a._v(" 每个函数都有两个非继承方法")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("apply()")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("接收两个参数")]),a._v(" "),v("ul",[v("li",[a._v("1、函数运行作用域")]),a._v(" "),v("li",[a._v("参数的数组（可以是Array的实例，也可以是arguments对象）")])])])])]),a._v(" "),v("li",[v("p",[a._v("call()")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("接收两个参数")]),a._v(" "),v("ul",[v("li",[a._v("1、函数运行作用域")]),a._v(" "),v("li",[a._v("2、传给函数的参数必须逐个列出来，不能像apply一样可以传递一个Array或者arguments")])])])])]),a._v(" "),v("li",[v("p",[a._v("bind()")]),a._v(" "),v("ul",[v("li",[a._v("创建一个函数实例，其this值会被绑定到传给bind()的参数")]),a._v(" "),v("li",[a._v("和apply和call的区别是，它返回的是一个函数，并且默认不会调用。")])])])]),a._v(" "),v("h2",{attrs:{id:"基本包装类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基本包装类型"}},[a._v("#")]),a._v(" 基本包装类型")]),a._v(" "),v("h3",{attrs:{id:"与引用类型的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#与引用类型的区别"}},[a._v("#")]),a._v(" 与引用类型的区别")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("使用new创建的引用类型，在执行流离开当前作用域前一直保存在内存中")])]),a._v(" "),v("li",[v("p",[a._v("基本保存类型的对象，只存在于一行代码执行的瞬间")]),a._v(" "),v("ul",[v("li",[a._v("1、创建一个实例")]),a._v(" "),v("li",[a._v("2、实力上调用指定的方法")]),a._v(" "),v("li",[a._v("3、销毁这个实例")])])])]),a._v(" "),v("h2",{attrs:{id:"单体内置对象"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#单体内置对象"}},[a._v("#")]),a._v(" 单体内置对象")]),a._v(" "),v("h3",{attrs:{id:"global对象"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#global对象"}},[a._v("#")]),a._v(" Global对象")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("URI编码方法")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("encodeURI()")]),a._v(" "),v("ul",[v("li",[a._v("用于对整个uri进行替换，不会对本身属于URI的特殊字符进行编码，例如冒号、正斜杠、问号和井字号")])])]),a._v(" "),v("li",[v("p",[a._v("encodeURIComponent()")]),a._v(" "),v("ul",[v("li",[a._v("主要用于URI的某一段进行编码，会对它发现的任何非标准字符进行编码")])])]),a._v(" "),v("li",[v("p",[a._v("decodeURI()")])]),a._v(" "),v("li",[v("p",[a._v("decodeURIComponet()")])])])]),a._v(" "),v("li",[v("p",[a._v("eval()")])]),a._v(" "),v("li",[v("p",[a._v("Global对象的属性")])]),a._v(" "),v("li",[v("p",[a._v("window对象")])])]),a._v(" "),v("h3",{attrs:{id:"math对象"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#math对象"}},[a._v("#")]),a._v(" Math对象")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("Math.min()")])]),a._v(" "),v("li",[v("p",[a._v("Math.max()")])]),a._v(" "),v("li",[v("p",[a._v("舍入方法")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("Math.ceil()")]),a._v(" "),v("ul",[v("li",[a._v("向上舍入")])])]),a._v(" "),v("li",[v("p",[a._v("Math.floor()")]),a._v(" "),v("ul",[v("li",[a._v("向下舍入")])])]),a._v(" "),v("li",[v("p",[a._v("Math.round()")]),a._v(" "),v("ul",[v("li",[a._v("四舍五入")])])])])]),a._v(" "),v("li",[v("p",[a._v("Math.random()")]),a._v(" "),v("ul",[v("li",[a._v("返回大于0，小于1的一个随机数")])])])])])}),[],!1,null,null,null);t.default=r.exports}}]);