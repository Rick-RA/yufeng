(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{363:function(t,a,r){"use strict";r.r(a);var e=r(33),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"对象的扩展"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#对象的扩展"}},[t._v("#")]),t._v(" 对象的扩展")]),t._v(" "),r("h2",{attrs:{id:"属性的简洁表示法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#属性的简洁表示法"}},[t._v("#")]),t._v(" 属性的简洁表示法")]),t._v(" "),r("h3",{attrs:{id:"es6允许直接写入变量和函数作为对象的属性和方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#es6允许直接写入变量和函数作为对象的属性和方法"}},[t._v("#")]),t._v(" ES6允许直接写入变量和函数作为对象的属性和方法")]),t._v(" "),r("ul",[r("li",[t._v("let bar = {foo}  ==  {foo:foo}")])]),t._v(" "),r("h2",{attrs:{id:"属性名表达式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#属性名表达式"}},[t._v("#")]),t._v(" 属性名表达式")]),t._v(" "),r("h3",{attrs:{id:"es6可以将表达式放在-中括号中作为属性名"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#es6可以将表达式放在-中括号中作为属性名"}},[t._v("#")]),t._v(' es6可以将表达式放在"[]"中括号中作为属性名')]),t._v(" "),r("h3",{attrs:{id:"注：属性名和简洁表示法不能同时使用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#注：属性名和简洁表示法不能同时使用"}},[t._v("#")]),t._v(" 注：属性名和简洁表示法不能同时使用")]),t._v(" "),r("h3",{attrs:{id:"属性名表达式如果是一个对象，默认情况下会自动将对象转为字符串-object-object"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#属性名表达式如果是一个对象，默认情况下会自动将对象转为字符串-object-object"}},[t._v("#")]),t._v(" 属性名表达式如果是一个对象，默认情况下会自动将对象转为字符串[object Object]")]),t._v(" "),r("h2",{attrs:{id:"方法的name属性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#方法的name属性"}},[t._v("#")]),t._v(" 方法的name属性")]),t._v(" "),r("h3",{attrs:{id:"对象的方法也有name属性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#对象的方法也有name属性"}},[t._v("#")]),t._v(" 对象的方法也有name属性")]),t._v(" "),r("h2",{attrs:{id:"object-is"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#object-is"}},[t._v("#")]),t._v(" Object.is()")]),t._v(" "),r("h3",{attrs:{id:""}},[r("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")]),t._v(" ==")]),t._v(" "),r("ul",[r("li",[t._v("自动转换数据类型后，再比较")])]),t._v(" "),r("h3",{attrs:{id:"-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#-2"}},[t._v("#")]),t._v(" ===")]),t._v(" "),r("ul",[r("li",[t._v("NaN不等于自身（NaN不等于NaN），+0 等于-0")])]),t._v(" "),r("h3",{attrs:{id:"object-is-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#object-is-2"}},[t._v("#")]),t._v(" Object.is()")]),t._v(" "),r("ul",[r("li",[t._v("在所有环境中，只要两个值是一样的，他们就应该相等")])]),t._v(" "),r("h2",{attrs:{id:"object-assgin"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#object-assgin"}},[t._v("#")]),t._v(" Object.assgin()")]),t._v(" "),r("h3",{attrs:{id:"用于将源对象的所有可枚举属性复制到目标对象"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#用于将源对象的所有可枚举属性复制到目标对象"}},[t._v("#")]),t._v(" 用于将源对象的所有可枚举属性复制到目标对象")]),t._v(" "),r("h3",{attrs:{id:"基本用法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基本用法"}},[t._v("#")]),t._v(" 基本用法")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("第一个参数是目标对象，后面是源对象")])]),t._v(" "),r("li",[r("p",[t._v("如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性")])]),t._v(" "),r("li",[r("p",[t._v("1、如果只有一个参数，会直接返回该参数")])]),t._v(" "),r("li",[r("p",[t._v("2、如果参数不是对象，会将参数转为对象，然后返回")])]),t._v(" "),r("li",[r("p",[t._v("3、undefined和null无法转成对象，会报错")])]),t._v(" "),r("li",[r("p",[t._v("4、如果非对象出现在源对象的位置（不是第一个参数）")]),t._v(" "),r("ul",[r("li",[t._v("1、首先转换成对象")]),t._v(" "),r("li",[t._v("2、如果不能转成对象也不会报错，如undefined，null会跳过")])])]),t._v(" "),r("li",[r("p",[t._v("5、Object.assgin()的复制的属性是有限制的，只复制源对象的自身属性（不复制继承属性），也不复制不可枚举属性")])])]),t._v(" "),r("h3",{attrs:{id:"注意点："}},[r("a",{staticClass:"header-anchor",attrs:{href:"#注意点："}},[t._v("#")]),t._v(" 注意点：")]),t._v(" "),r("ul",[r("li",[t._v("Object.assgin()是浅拷贝，不是深拷贝")]),t._v(" "),r("li",[t._v("如果遇到同名属性，处理的结果是覆盖而不是添加")])]),t._v(" "),r("h3",{attrs:{id:"常见用途"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#常见用途"}},[t._v("#")]),t._v(" 常见用途")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("为对象添加属性")])]),t._v(" "),r("li",[r("p",[t._v("为对象添加方法")])]),t._v(" "),r("li",[r("p",[t._v("克隆对象（深拷贝）")]),t._v(" "),r("ul",[r("li",[t._v("Object.assgin({},origin)")])])]),t._v(" "),r("li",[r("p",[t._v("合并多个对象")])]),t._v(" "),r("li",[r("p",[t._v("为属性指定默认值")])])]),t._v(" "),r("h2",{attrs:{id:"属性的可枚举性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#属性的可枚举性"}},[t._v("#")]),t._v(" 属性的可枚举性")]),t._v(" "),r("h3",{attrs:{id:"对象的每一个属性都具有一个描述对象（descriptor）-用于控制该属性的行为"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#对象的每一个属性都具有一个描述对象（descriptor）-用于控制该属性的行为"}},[t._v("#")]),t._v(" 对象的每一个属性都具有一个描述对象（Descriptor）,用于控制该属性的行为")]),t._v(" "),r("h3",{attrs:{id:"object-getownpropertydescriptor-方法可以获取该属性的描述对象"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#object-getownpropertydescriptor-方法可以获取该属性的描述对象"}},[t._v("#")]),t._v(" Object.getOwnPropertyDescriptor()方法可以获取该属性的描述对象")]),t._v(" "),r("h3",{attrs:{id:"会忽略enumeralbe-false的操作"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#会忽略enumeralbe-false的操作"}},[t._v("#")]),t._v(" 会忽略enumeralbe:false的操作")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("ES5")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("for...in")]),t._v(" "),r("ul",[r("li",[t._v("只遍历对象自身和继承的可枚举属性")])])]),t._v(" "),r("li",[r("p",[t._v("Object.keys()")]),t._v(" "),r("ul",[r("li",[t._v("返回对象自身所有的可枚举属性的键名")])])]),t._v(" "),r("li",[r("p",[t._v("JSON.stringify()")]),t._v(" "),r("ul",[r("li",[t._v("只串行化对象自身的可枚举属性")])])])])]),t._v(" "),r("li",[r("p",[t._v("ES6")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("Object.assgin()")]),t._v(" "),r("ul",[r("li",[t._v("会忽略enumerable为false的属性")])])])])])]),t._v(" "),r("h3",{attrs:{id:"子主题-4"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#子主题-4"}},[t._v("#")]),t._v(" 子主题 4")]),t._v(" "),r("h2",{attrs:{id:"属性的遍历"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#属性的遍历"}},[t._v("#")]),t._v(" 属性的遍历")]),t._v(" "),r("h3",{attrs:{id:"es6一共5中方法可以遍历对象的属性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#es6一共5中方法可以遍历对象的属性"}},[t._v("#")]),t._v(" ES6一共5中方法可以遍历对象的属性")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("for..in")]),t._v(" "),r("ul",[r("li",[t._v("遍历自身和继承的可枚举属性")])])]),t._v(" "),r("li",[r("p",[t._v("Object.keys()")]),t._v(" "),r("ul",[r("li",[t._v("包括对象自身，不包括继承的可枚举属性")])])]),t._v(" "),r("li",[r("p",[t._v("Object.getOwnPropertyNames()")]),t._v(" "),r("ul",[r("li",[t._v("包括对象自身的所有属性，包括不可枚举属性，不含symbol")])])]),t._v(" "),r("li",[r("p",[t._v("Object.getOwnPropertySymbols()")]),t._v(" "),r("ul",[r("li",[t._v("包含对象自身的所有symbol属性")])])]),t._v(" "),r("li",[r("p",[t._v("Reflect.ownKeys()")]),t._v(" "),r("ul",[r("li",[t._v("包含对象自身的所有属性，不管属性名是Symbol还是字符串，也不管是否可枚举")])])]),t._v(" "),r("li",[r("p",[t._v("以上5种都遵循以下遍历顺序")]),t._v(" "),r("ul",[r("li",[t._v("1、首先遍历属性名为数值的属性，按照数字排序")]),t._v(" "),r("li",[t._v("2、遍历所有属性名为字符串的属性，按照生成时间排序")]),t._v(" "),r("li",[t._v("3、最后遍历所有属性名为Symbol值的属性，按照生成时间排序")])])])]),t._v(" "),r("h2",{attrs:{id:"proto"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#proto"}},[t._v("#")]),t._v(" proto")]),t._v(" "),r("h3",{attrs:{id:"proto-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#proto-2"}},[t._v("#")]),t._v(" "),r("strong",[t._v("proto")])]),t._v(" "),r("ul",[r("li",[t._v("读取或设置当前对象的prototype对象")])]),t._v(" "),r("h3",{attrs:{id:"object-setprototypeof"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#object-setprototypeof"}},[t._v("#")]),t._v(" Object.setPrototypeOf()")]),t._v(" "),r("ul",[r("li",[t._v("用来设置一个对象的prototype对象")])]),t._v(" "),r("h3",{attrs:{id:"object-getprototypeof"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#object-getprototypeof"}},[t._v("#")]),t._v(" Object.getPrototypeof()")]),t._v(" "),r("ul",[r("li",[t._v("用来读取一个对象的prototype对象")])]),t._v(" "),r("h2",{attrs:{id:"键值对"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#键值对"}},[t._v("#")]),t._v(" 键值对")]),t._v(" "),r("h3",{attrs:{id:"object-keys"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#object-keys"}},[t._v("#")]),t._v(" Object.keys()")]),t._v(" "),r("h3",{attrs:{id:"object-values"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#object-values"}},[t._v("#")]),t._v(" Object.values()")]),t._v(" "),r("h3",{attrs:{id:"object-entries"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#object-entries"}},[t._v("#")]),t._v(" Object.entries()")]),t._v(" "),r("h2",{attrs:{id:"对象的扩展运算符"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#对象的扩展运算符"}},[t._v("#")]),t._v(" 对象的扩展运算符")]),t._v(" "),r("h3",{attrs:{id:"解构赋值"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#解构赋值"}},[t._v("#")]),t._v(" 解构赋值")]),t._v(" "),r("ul",[r("li",[t._v("解构赋值的复制是浅复制。即如果一个键的值是复合类型的值（数组、对象、函数），那么解构赋值复制的是这个值的引用")])]),t._v(" "),r("h3",{attrs:{id:"扩展运算符（-）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#扩展运算符（-）"}},[t._v("#")]),t._v(" 扩展运算符（...）")]),t._v(" "),r("ul",[r("li",[t._v("用于取出参数对象的所有可遍历属性，并将其复制到当前对象之中")])]),t._v(" "),r("h2",{attrs:{id:"object-getownpropertydescriptors"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#object-getownpropertydescriptors"}},[t._v("#")]),t._v(" Object.getOwnPropertyDescriptors()")]),t._v(" "),r("h3",{attrs:{id:"es5的object-getownpropertydescriptor-用来返回某个对象的属性的描述对象"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#es5的object-getownpropertydescriptor-用来返回某个对象的属性的描述对象"}},[t._v("#")]),t._v(" ES5的Object.getOwnPropertyDescriptor()用来返回某个对象的属性的描述对象")]),t._v(" "),r("h3",{attrs:{id:"es2017引入object-getownpropertydescriptors-方法，返回指定对象所有自身属性（非集成属性）的描述对象"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#es2017引入object-getownpropertydescriptors-方法，返回指定对象所有自身属性（非集成属性）的描述对象"}},[t._v("#")]),t._v(" ES2017引入Object.getOwnPropertyDescriptors()方法，返回指定对象所有自身属性（非集成属性）的描述对象")]),t._v(" "),r("h2",{attrs:{id:"null传导运算符"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#null传导运算符"}},[t._v("#")]),t._v(" Null传导运算符")]),t._v(" "),r("h3",{attrs:{id:"类似于swift的可选类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#类似于swift的可选类型"}},[t._v("#")]),t._v(" 类似于swift的可选类型")]),t._v(" "),r("h3",{attrs:{id:"a-body-c"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#a-body-c"}},[t._v("#")]),t._v(" a?body?c")])])}),[],!1,null,null,null);a.default=s.exports}}]);